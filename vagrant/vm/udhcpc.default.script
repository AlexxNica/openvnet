#!/bin/bash

# udhcp sample script by Gabriel Somlo (somlo at cmu edu)
#       - uses 'ip' instead of 'ifconfig' and 'route'
#       - make minimal changes, and only if required by changing dhcp options
#
# original by https://github.com/hifi/raspbian-ua-netinst/blob/master/scripts/etc/udhcpc/default.script
#

update_resolv_conf() {
  [ -n "$domain" ] && "echo search $domain > $RESOLV_CONF"
  for i in $dns ; do
    bash -c "echo nameserver $i >> $RESOLV_CONF"
  done
}

[ -z "$1" ] && echo 'Error: should be called from udhcpc' && exit 1

set -x
vm_id=$(ip addr show $interface | grep -w 'link/ether' |awk '{ print $2 }' | cut -d':' -f6 |cut -c2)

# where to save config information for $interface:
#CFG="/var/run/udhcpc.${interface}.cfg"
CFG="/var/run/udhcpc.vm${vm_id}.cfg"

# names of files we might need to touch:
RESOLV_CONF="/var/run/resolv.conf.vm${vm_id}"

# which interface configures DNS and NTP ? Comment out if none:
PEERDNS_IF=eth1

case "$1" in
  deconfig)
    # bring interface up, but with no IP configured:
    ip addr flush dev $interface
    ip link set $interface up
    # remove any stored config info for this $interface:
    rm -f $CFG
    # restore any pre-dhcp config files:
    if [ "$interface" == "$PEERDNS_IF" ] ; then
      [ -f ${RESOLV_CONF} ] && rm ${RESOLV_CONF}
    fi
    #if [ "$interface" == "$PEERNTP_IF" ] ; then
    #  [ -f ${NTP_CONF}.dhcsave ] && mv -f ${NTP_CONF}.dhcsave $NTP_CONF
    #fi
    ;;
  bound)
    # save config info for $interface:
    set > $CFG
    # configure interface and routes:
    ip addr flush dev $interface
    ip addr add ${ip}/${mask} dev $interface
    [ -n "$router" ] && ip route add default via ${router%% *} dev $interface
    # save pre-dhcp config files and generate new ones:
    if [ "$interface" == "$PEERDNS_IF" ] ; then
      update_resolv_conf
    fi
    #if [ "$interface" == "$PEERNTP_IF" ] ; then
    #  [ -f $NTP_CONF ] && mv -f $NTP_CONF ${NTP_CONF}.dhcsave
    #  > $NTP_CONF
    #  for i in $ntpsrv ; do
    #    echo server $i >> $NTP_CONF
    #  done
    #fi
    ;;
  renew)
    # compare new vs. previous config info:
    set > ${CFG}.new
    for i in $(diff -U1 $CFG ${CFG}.new | grep -E ^[+-] \
                                        | tail +3 \
                                        | awk -F[+-=] '{print $2}') ; do
      case "$i" in
        ip|mask|router)
          REDO_NET='yes'
          ;;
        domain|dns)
          REDO_DNS='yes'
          ;;
        #ntpsrv)
        #  REDO_NTP='yes'
        #  ;;
      esac
    done
    # save new config info:
    mv -f ${CFG}.new $CFG
    # make only necessary changes, as per config comparison:
    if [ -n "$REDO_NET" ] ; then
      ip addr flush dev $interface
      ip addr add ${ip}/${mask} dev $interface
      [ -n "$router" ] && ip route add default via ${router%% *} dev $interface
    fi
    if [ -n "$REDO_DNS" -a "$interface" == "$PEERDNS_IF" ] ; then
      update_resolv_conf
    fi
    #if [ -n "$REDO_NTP" -a "$interface" == "$PEERNTP_IF" ] ; then
    #  > $NTP_CONF
    #  for i in $ntpsrv ; do
    #    echo server $i >> $NTP_CONF
    #  done
    #  # FIXME: RELOAD NTP DAEMON HERE
    #fi
    ;;
esac

exit 0
