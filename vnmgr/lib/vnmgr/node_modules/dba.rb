# -*- coding: utf-8 -*-

require 'sequel'

module Vnmgr::NodeModules
  class Proxy
    def initialize(name)
      @ref ||= Module.const_get('Vnmgr').const_get('NodeModules').const_get('DBA').const_get(name.capitalize).new
    end

    def method_missing(method_name, *args)
      @ref.send(method_name, *args)
    end
  end


  class Dba
    include Celluloid
    include Celluloid::Logger

    task_class TaskThread

    def initialize(*args, &block)
      info "Dba initalized."
      @tables = args[0]
      @tables.each do |t|
        instance_variable_set("@#{t}", Proxy.new(t))
      end
    end

    def method_missing(method_name, table_name, *args)
      define_singleton_method method_name do |table_name, *args|
        debug "table: #{table_name} method: #{method_name}"
        var = instance_variable_get(table_name)
        var.send(method_name, *args)
      end

      debug "method_missing..."
      self.send(method_name, table_name, *args)
    end
  end
end
