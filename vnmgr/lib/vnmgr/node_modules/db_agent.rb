
require 'sequel'

module Vnmgr
  module NodeModules
    class DbAgent
    
      include Celluloid
      include Celluloid::Logger
      
      M = Vnmgr::Models

      def initialize
        @db = Sequel.connect('mysql://localhost/vnmgr?user=root')
        info 'DbAgent initialized...'
      end
      
      def create_network params
        info "[create_network]: params = #{params}"
        begin
          network = M::Network.new(params)
          network.save
        rescue
          error "[create_network][Error]: params = #{params}"
          raise "UnknownParametes"
        end
        network.to_hash[:uuid]
      end

      def get_network network_uuid
        info "[get_network]: uuid = #{network_uuid}"
        network = taggable_find(network_uuid)
        network.to_hash
      end
      
      def get_networks
        info '[get_networks]'
        networks = M::Network.all
        debug "[get_networks]: #{networks}"
        networks.map { |network|
          network.to_hash
        }
      end
      
      def delete_network network_uuid
        info "[delete_network]: uuid = #{network_uuid}"
        network = taggable_find(network_uuid)

        begin
          network.delete
        rescue
          error "[delete_network][Error]"
          raise "Error"
        end

        info "[delete_network]: network deleted (uuid:#{network_uuid})"
        get_networks
      end
      
      def update_network network_uuid, params
        info "[update_network]: uuid = #{network_uuid} params = #{params}"
        network = taggable_find(network_uuid)

        begin
          network.update(params)
        rescue
          error "[update_network][Error] params = #{params}"
          raise "Error"
        end

        info "[update_network] updated (uuid:#{network_uuid})"
        network.to_hash
      end
      
      def create_vif params
        info "[create_vif]: params = #{params}"
        begin
          vif = M::Vif.new(params)
          vif.save
        rescue
          error "[create_vif][Error]: params = #{params}"
          raise "UnknownParametes"
        end
        vif.to_hash[:uuid]
      end

      def get_vif vif_uuid
        info "[get_vif]: uuid = #{vif_uuid}"
        vif = taggable_find(vif_uuid)
        vif.to_hash
      end

      def get_vifs
        info "[get_vifs]"

        vifs = M::Vif.all
        debug "[get_vifs]: #{vifs}"
        vifs.map { |vif|
          vif.to_hash
        }
      end

      def update_vif vif_uuid, params
        info "[update_vif]: uuid = #{vif_uuid} params = #{params}"
        vif = taggable_find(vif_uuid)

        begin
          vif.update(params)
        rescue
          error "[update_vif][Error] params = #{params}"
          raise "Error"
        end

        info "[update_vif] updated (uuid:#{vif_uuid})"
        vif.to_hash
      end

      def delete_vif vif_uuid
        info "[delete_vif]: uuid = #{vif_uuid}"
        vif = taggable_find(vif_uuid)

        begin
          vif.delete
        rescue
          error "[delete_vif][Error]"
          raise "Error"
        end

        info "[delete_vif]: vif deleted (uuid:#{vif_uuid})"
        get_vifs
      end

      def attach_vif network_uuid, vif_uuid
        info "[attach_vif]: network_uuid = #{network_uuid} vif_uuid = #{vif_uuid}"
        network = taggable_find(network_uuid)
        vif = taggable_find(vif_uuid)
        vif.network_id = network.id
        vif.save
        vif.to_hash
      end
      
      def detach_vif vif_uuid
        info "[detach_vif]: vif_uuid = #{vif_uuid}"
        vif = taggable_find(vif_uuid)
        vif.network_id = nil
        vif.save
        vif.to_hash
      end
      
      def create_mac_range mac_range_uuid, range_begin, range_end
      end
      
      def get_mac_range mac_range_uuid
      end
      
      def get_mac_ranges
      end
      
      def delete_mac_range mac_range_uuid
      end
      
      def create_dhcp_service network_uuid
      end
      
      def get_dhcp_service network_uuid
      end
      
      def get_dhcp_services
      end
      
      def config_dhcp_service network_uuid
      end
      
      def delete_dhcp_service network_uuid
      end

      private
      def taggable_find uuid
        begin
          model = M::Taggable.find(uuid)
        rescue
          error "[taggable_find][Error]: uuid = #{uuid}"
          raise "UnknownUUID"
        end
        model
      end
    end
  end
end
