# -*- coding: utf-8 -*-

require 'sequel'

module Vnmgr::NodeModules::DBA
  class Base
    attr_reader :model

    def initialize
      class_name = self.class.to_s.split('::').last
      @model ||= Module.const_get('Vnmgr').const_get('Models').const_get(class_name)
    end

    public
    def method_missing(method_name, *args)
      define_singleton_method method_name do |*args|
        ret = model.send(method_name, *args)
        data_return(ret)
      end
      self.send(method_name, *args)
    end

    private
    def data_return(ret)
      case ret
      when Array
        ret.map { |r|
          r.to_hash
        }
      when nil
        nil
      else
        ret.to_hash
      end
    end
  end
end
