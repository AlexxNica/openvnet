# -*- coding: utf-8 -*-

require 'sequel'

module Vnmgr::NodeModules::DBA
  class Base

    include Celluloid
    include Celluloid::Logger

    task_class TaskThread

    def initialize
      info "initialize"
      @@db ||= Sequel.connect('mysql://localhost/vnmgr?user=root')
      @@models ||= Module.const_get('Vnmgr').const_get('Models')
    end

    private
    def taggable_find uuid
      begin
        model = @@models::Taggable.find(uuid)
      rescue
        error "[taggable_find][Error]: uuid = #{uuid}"
        raise "UnknownUUID"
      end
      model
    end

    #:TODO
    # cleanup model search
    #
    def model_find
      begin
        @@models.const_get(self.name.capitalize)
      rescue NameError => e
        error e
        raise "NameError"
      end
    end

    public
    def send klass, method_name, *args
      model = model_find(klass)
      debug "klass = #{klass}"
      debug "method_name = #{method_name}"
      debug "arg = #{args}"
      JSON.generate(model.method(method_name).call(args))
    end

    def create params
      model = model_find
      info "[create]: model = #{model}, params = #{params}"
      begin
        record = model.new(params)
        record.save
      rescue
        error "[create][Error]: params = #{params}"
        raise "UnknownParametes"
      end
      JSON.generate({:uuid => record.to_hash[:uuid]})
    end

    def get_all
      model = model_find
      info "[get_all]: model = #{model}"
      records = model.all
      debug "[get_all]: #{records}"
      JSON.generate(records.map { |record|
        record.to_hash
      })
    end

    def get uuid
      info "[get]: uuid = #{uuid}"
      record = taggable_find(uuid)
      JSON.generate(record.to_hash)
    end

    def update uuid, params
      info "[update]: uuid = #{uuid}, params = #{params}"
      record = taggable_find(uuid)
      begin
        record.update(params)
      rescue
        error "[update][Error] params = #{params}"
        raise "Error"
      end
      info "[update] updated (uuid:#{uuid})"
      JSON.generate(record.to_hash)
    end

    def delete uuid
      info "[delete]: uuid = #{uuid}"
      record = taggable_find(uuid)
      begin
        record.delete
      rescue
        error "[delete][Error]"
        raise "Error"
      end
      info "[delete]: record deleted (uuid:#{uuid})"
      nil
    end
  end
end
