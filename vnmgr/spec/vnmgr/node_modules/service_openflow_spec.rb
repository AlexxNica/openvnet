# -*- coding: utf-8 -*-
require 'spec_helper'

describe Vnmgr::NodeModules::ServiceOpenflow do
  
  describe "create_tunnel" do
    before(:each) do
      3.times.inject([]) do |array|
        array << Fabricate(:datapath) do
          uuid { "dp-test#{sequence(:uuid, 1)}" }
          ipv4_address { sequence(:ipv4_network, IPAddr.new("192.168.1.1").to_i) }
          datapath_id { sequence(:datapath_id, 1).to_s * 16 }
          #node_id { "vna#{sequence(:node_id, 1)}" }
          node_id do
            sequence :node_id do |n|
              if n == 0
                'vna'
              else
                "vna#{n+1}"
              end
            end
          end
        end
      end
    end
  
    it "should create the entries in the tunnel table" do
      ofctl = double(:ofctl)
      Vnmgr::VNet::Openflow::OvsOfctl.stub(:new).and_return(ofctl)
      ofctl.should_receive(:add_gre_tunnel).with("t-vna2","192.168.1.2")
      ofctl.should_receive(:add_gre_tunnel).with("t-vna3","192.168.1.3")
      
      so = Vnmgr::NodeModules::ServiceOpenflow.new
      conf = Vnmgr::Configurations::Vna.conf
      so.create_tunnels
      tunnels = Vnmgr::Models::Datapath.find({:node_id => conf.node.id}).tunnels
      expect(tunnels.size).to eq 2
      tunnels.each do |t|
        expect(%w(vna2 vna3)).to be_member t.dst_datapath.node_id
      end
    end
  end
end
