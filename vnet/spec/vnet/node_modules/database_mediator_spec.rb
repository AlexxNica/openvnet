# -*- coding: utf-8 -*-
require 'spec_helper'

describe Vnet::NodeModules::DatabaseMediator do

  subject { Vnet::NodeModules::DatabaseMediator.new }

  context "when an entry is created on the network table of the vdc" do

    def deep_copy(h)
      Marshal.load( Marshal.dump(h) )
    end

    let(:model_class) { :Network }

    let(:params) do
      {
        :uuid => "nw-testuuid",
        :display_name => "test_name",
        :ipv4_network => "1.2.3.0",
        :prefix => 24,
        :editable => true
      }
    end

    describe "create_entry" do
      it "creates a record on the network table of the vnet" do
        subject.create_entry(model_class, deep_copy(params))
        entry = Vnet::Models::Network[params[:uuid]]

        expect(entry).not_to eq nil
        expect(entry.canonical_uuid).to eq params[:uuid]
      end
    end

    describe "destroy_entry" do
      it "deletes a record on the network table of the vnet" do
        subject.create_entry(model_class, deep_copy(params))
        subject.destroy_entry(model_class, deep_copy(params)[:uuid])

        expect(Vnet::Models::Network[params[:uuid]]).to eq nil
      end
    end
  end
end
