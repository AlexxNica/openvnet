# -*- coding: utf-8 -*-

module Vnet::NodeModules
  class DatabaseMediator
    include Celluloid
    include Celluloid::Logger

    attr_reader :table

    def initialize
      @table = {
        :Network => [:Network],
        :NetworkService => [:Interface, :NetworkService]
      }

      info "Database mediator initialized..."
    end

    def create_entry(vdc_model_class, vdc_params)
      if vnet_model_classes = table[vdc_model_class]
        vnet_model_classes.each do |vnet_model_class|
          vnet_params = filter_params(vnet_model_class, vdc_params)
          Vnet::NodeApi.const_get(vnet_model_class).create(vnet_params)
        end
      else
        error "corresponded model class has not been found for #{vdc_model_class}"
      end
    end

    private

    def filter_params(vnet_model_class, vdc_params)
      vnet_params = {}

      case vnet_model_class
      when :Network
        vnet_params[:uuid]         = vdc_params[:uuid]
        vnet_params[:display_name] = vdc_params[:display_name]
        vnet_params[:ipv4_network] = vdc_params[:ipv4_network]
        vnet_params[:ipv4_prefix]  = vdc_params[:prefix]
        vnet_params[:domain_name]  = vdc_params[:domain_name]
        vnet_params[:network_mode] = 'virtual'
        vnet_params[:editable]     = vdc_params[:editable]
      else
        error "#{vnet_model_class} has not been found."
      end

      vnet_params
    end
  end
end
